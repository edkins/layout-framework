# Generated from Layout.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,116,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,8,1,9,4,9,79,8,9,11,9,12,9,80,1,9,1,9,4,9,85,8,9,11,9,12,9,
        86,1,10,3,10,90,8,10,1,10,4,10,93,8,10,11,10,12,10,94,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,4,13,
        111,8,13,11,13,12,13,112,1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,6,1,0,48,57,1,
        0,120,120,1,0,45,45,1,0,35,35,2,0,48,57,97,102,3,0,9,10,13,13,32,
        32,120,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,
        0,3,38,1,0,0,0,5,40,1,0,0,0,7,42,1,0,0,0,9,47,1,0,0,0,11,50,1,0,
        0,0,13,57,1,0,0,0,15,64,1,0,0,0,17,71,1,0,0,0,19,78,1,0,0,0,21,89,
        1,0,0,0,23,96,1,0,0,0,25,101,1,0,0,0,27,110,1,0,0,0,29,30,5,118,
        0,0,30,31,5,105,0,0,31,32,5,101,0,0,32,33,5,119,0,0,33,34,5,112,
        0,0,34,35,5,111,0,0,35,36,5,114,0,0,36,37,5,116,0,0,37,2,1,0,0,0,
        38,39,5,123,0,0,39,4,1,0,0,0,40,41,5,125,0,0,41,6,1,0,0,0,42,43,
        5,103,0,0,43,44,5,114,0,0,44,45,5,105,0,0,45,46,5,100,0,0,46,8,1,
        0,0,0,47,48,5,45,0,0,48,49,5,45,0,0,49,10,1,0,0,0,50,51,5,115,0,
        0,51,52,5,99,0,0,52,53,5,114,0,0,53,54,5,111,0,0,54,55,5,108,0,0,
        55,56,5,108,0,0,56,12,1,0,0,0,57,58,5,98,0,0,58,59,5,111,0,0,59,
        60,5,117,0,0,60,61,5,110,0,0,61,62,5,100,0,0,62,63,5,115,0,0,63,
        14,1,0,0,0,64,65,5,99,0,0,65,66,5,111,0,0,66,67,5,108,0,0,67,68,
        5,117,0,0,68,69,5,109,0,0,69,70,5,110,0,0,70,16,1,0,0,0,71,72,5,
        108,0,0,72,73,5,111,0,0,73,74,5,114,0,0,74,75,5,101,0,0,75,76,5,
        109,0,0,76,18,1,0,0,0,77,79,7,0,0,0,78,77,1,0,0,0,79,80,1,0,0,0,
        80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,84,7,1,0,0,83,85,7,
        0,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
        20,1,0,0,0,88,90,7,2,0,0,89,88,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,
        0,91,93,7,0,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,
        1,0,0,0,95,22,1,0,0,0,96,97,7,3,0,0,97,98,7,4,0,0,98,99,7,4,0,0,
        99,100,7,4,0,0,100,24,1,0,0,0,101,102,7,3,0,0,102,103,7,4,0,0,103,
        104,7,4,0,0,104,105,7,4,0,0,105,106,7,4,0,0,106,107,7,4,0,0,107,
        108,7,4,0,0,108,26,1,0,0,0,109,111,7,5,0,0,110,109,1,0,0,0,111,112,
        1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,115,
        6,13,0,0,115,28,1,0,0,0,6,0,80,86,89,94,112,1,6,0,0
    ]

class LayoutLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    DIMS = 10
    NUM = 11
    COLOR3 = 12
    COLOR6 = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'viewport'", "'{'", "'}'", "'grid'", "'--'", "'scroll'", "'bounds'", 
            "'column'", "'lorem'" ]

    symbolicNames = [ "<INVALID>",
            "DIMS", "NUM", "COLOR3", "COLOR6", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "DIMS", "NUM", "COLOR3", "COLOR6", "WS" ]

    grammarFileName = "Layout.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


